blueprint:
  name: Solar Water Heater Control
  description: >
    Intelligente Steuerung eines Warmwasserboilers basierend auf Solarüberschuss.
    Nutzt Solcast-Prognosen, Batterie-SOC und aktuellen Hausverbrauch für optimale Entscheidungen.
  domain: automation
  input:
    # Sensoren
    solar_forecast_sensor:
      name: Solcast Forecast Sensor
      description: Solcast Sensor für aktuelle Solarprognose (W)
      selector:
        entity:
          domain: sensor

    solar_forecast_today:
      name: Solcast Today Total
      description: Solcast Sensor für heutige Gesamtprognose (kWh)
      selector:
        entity:
          domain: sensor

    house_consumption:
      name: Hausverbrauch
      description: Aktueller Hausverbrauch (W)
      selector:
        entity:
          domain: sensor

    battery_soc:
      name: Batterie SOC
      description: Batterie Ladezustand (%)
      selector:
        entity:
          domain: sensor

    water_heater_temp:
      name: Warmwassertemperatur
      description: Aktuelle Temperatur des Warmwassers (Â°C)
      selector:
        entity:
          domain: sensor

    # Steuerungsgerät
    water_heater_switch:
      name: Warmwasserboiler Schalter
      description: Schalter/Switch für den Warmwasserboiler
      selector:
        entity:
          domain: switch

    # Konfiguration
    min_temp:
      name: Mindesttemperatur
      description: Minimale Wassertemperatur (Â°C)
      default: 45
      selector:
        number:
          min: 30
          max: 60
          unit_of_measurement: "Â°C"

    max_temp:
      name: Maximaltemperatur
      description: Maximale Wassertemperatur (Â°C)
      default: 60
      selector:
        number:
          min: 50
          max: 80
          unit_of_measurement: "Â°C"

    min_battery_soc:
      name: Mindest Batterie SOC
      description: Minimaler Batterie-Ladezustand für Boiler-Betrieb (%)
      default: 80
      selector:
        number:
          min: 20
          max: 100
          unit_of_measurement: "%"

    min_solar_surplus:
      name: Mindest Solarüberschuss
      description: Minimaler Solarüberschuss für Boiler-Aktivierung (W)
      default: 2000
      selector:
        number:
          min: 500
          max: 5000
          unit_of_measurement: "W"

    heater_power:
      name: Boiler Leistung
      description: Leistungsaufnahme des Boilers (W)
      default: 2000
      selector:
        number:
          min: 1000
          max: 4000
          unit_of_measurement: "W"

    # Zeitfenster
    start_time:
      name: Startzeit
      description: Früheste Startzeit für Boiler-Betrieb
      default: "09:00:00"
      selector:
        time: {}

    end_time:
      name: Endzeit
      description: Späteste Endzeit für Boiler-Betrieb
      default: "16:00:00"
      selector:
        time: {}

    # Erweiterte Optionen
    forecast_threshold:
      name: Prognose-Schwellwert
      description: Mindest-Tagesprognose für Boiler-Betrieb (kWh)
      default: 15
      selector:
        number:
          min: 5
          max: 50
          unit_of_measurement: "kWh"

    emergency_heating:
      name: Notfall-Heizung aktivieren
      description: Boiler auch ohne Solarüberschuss bei sehr niedrigen Temperaturen aktivieren
      default: true
      selector:
        boolean: {}

    emergency_temp:
      name: Notfall-Temperatur
      description: Temperatur bei der Notfall-Heizung aktiviert wird (Â°C)
      default: 35
      selector:
        number:
          min: 20
          max: 45
          unit_of_measurement: "Â°C"

    # Laufzeit-Steuerung
    min_runtime:
      name: Mindestlaufzeit
      description: Mindestlaufzeit des Boilers nach dem Einschalten (Minuten)
      default: 30
      selector:
        number:
          min: 10
          max: 120
          unit_of_measurement: "min"

    max_runtime:
      name: Maximale Laufzeit
      description: Maximale Laufzeit des Boilers pro Zyklus (Minuten)
      default: 90
      selector:
        number:
          min: 30
          max: 180
          unit_of_measurement: "min"

    min_pause_time:
      name: Mindest-Pausenzeit
      description: Minimale Pause zwischen Boiler-Zyklen (Minuten)
      default: 15
      selector:
        number:
          min: 5
          max: 60
          unit_of_measurement: "min"

    # Schwankungsdämpfung
    stability_check_time:
      name: Stabilitätsprüfung
      description: Zeit in Minuten, die Bedingungen erfüllt sein müssen vor Einschaltung
      default: 10
      selector:
        number:
          min: 5
          max: 30
          unit_of_measurement: "min"

    solar_average_minutes:
      name: Solar-Mittelwert Zeitraum
      description: Zeitraum für gleitenden Mittelwert der Solarleistung (Minuten)
      default: 15
      selector:
        number:
          min: 5
          max: 30
          unit_of_measurement: "min"

# Hauptautomatisierung
trigger:
  - platform: state
    entity_id: !input solar_forecast_sensor
  - platform: state
    entity_id: !input house_consumption
  - platform: state
    entity_id: !input battery_soc
  - platform: state
    entity_id: !input water_heater_temp
  - platform: time_pattern
    minutes: "/5"  # Überprüfung alle 5 Minuten

condition: []

action:
  - variables:
      solar_forecast: !input solar_forecast_sensor
      solar_forecast_today_entity: !input solar_forecast_today
      house_load: !input house_consumption
      battery_level: !input battery_soc
      water_temp: !input water_heater_temp
      heater_switch: !input water_heater_switch
      min_temperature: !input min_temp
      max_temperature: !input max_temp
      min_battery: !input min_battery_soc
      min_surplus: !input min_solar_surplus
      heater_watts: !input heater_power
      start_hour: !input start_time
      end_hour: !input end_time
      forecast_threshold_kwh: !input forecast_threshold
      emergency_enabled: !input emergency_heating
      emergency_threshold: !input emergency_temp
      minimum_runtime: !input min_runtime
      maximum_runtime: !input max_runtime
      minimum_pause: !input min_pause_time

      solar_surplus: >
        {{ (states(solar_forecast) | float(0) - states(house_load) | float(0)) | round(0) }}

      boiler_running: >
        {{ states(heater_switch) == 'on' }}

      time_since_change: >
        {% if state_attr(heater_switch, 'last_changed') %}
          {{ (now() - state_attr(heater_switch, 'last_changed')).total_seconds() }}
        {% else %}
          999999
        {% endif %}

      force_off_max_time: >
        {{ boiler_running and (time_since_change > (maximum_runtime * 60)) }}

      force_on_min_time: >
        {{ boiler_running and (time_since_change < (minimum_runtime * 60)) }}

      pause_time_ok: >
        {{ not boiler_running and (time_since_change > (minimum_pause * 60)) }}

      emergency_needed: >
        {{ emergency_enabled and (states(water_temp) | float(0) < emergency_threshold) }}

      time_window_ok: >
        {{ start_hour <= now().strftime('%H:%M:%S') <= end_hour }}

      temp_conditions: >
        {{ (states(water_temp) | float(0) < min_temperature) and (states(water_temp) | float(0) < max_temperature) }}

      solar_conditions: >
        {{ (solar_surplus >= min_surplus) and (solar_surplus >= heater_watts) and (states(battery_level) | float(0) >= min_battery) and (states(solar_forecast_today_entity) | float(0) >= forecast_threshold_kwh) }}

      should_run: >
        {% if force_off_max_time %}
          false
        {% elif force_on_min_time %}
          true
        {% elif emergency_needed %}
          {{ pause_time_ok if not boiler_running else true }}
        {% elif temp_conditions and time_window_ok %}
          {% if solar_conditions %}
            {{ pause_time_ok if not boiler_running else true }}
          {% else %}
            false
          {% endif %}
        {% else %}
          false
        {% endif %}

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ should_run == 'true' }}"
          - condition: template
            value_template: "{{ not boiler_running }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input water_heater_switch
          - service: logbook.log
            data:
              name: "Solar Water Heater Control"
              message: >
                Boiler eingeschaltet - Temp: {{ states(water_temp) }}Â°C,
                Solar: {{ states(solar_forecast) }}W,
                Überschuss: {{ solar_surplus }}W,
                Verbrauch: {{ states(house_load) }}W,
                Batterie: {{ states(battery_level) }}%,
                Geplante Laufzeit: {{ minimum_runtime }}min

      - conditions:
          - condition: template
            value_template: "{{ should_run == 'false' }}"
          - condition: template
            value_template: "{{ boiler_running }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input water_heater_switch
          - service: logbook.log
            data:
              name: "Solar Water Heater Control"
              message: >
                Boiler ausgeschaltet - Temp: {{ states(water_temp) }}Â°C,
                Solar: {{ states(solar_forecast) }}W,
                Überschuss: {{ solar_surplus }}W,
                Grund: {% if force_off_max_time %}Maximale Laufzeit erreicht{% else %}Bedingungen nicht erfüllt{% endif %}

mode: single
max_exceeded: silent
